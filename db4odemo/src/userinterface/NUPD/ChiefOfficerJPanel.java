/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.NUPD;

import Business.Complaint.Complaint;
import Business.Complaint.ComplaintDirectory;
import Business.EcoSystem;
import Business.Logic.NUPD.PoliceOfficer;
import Business.Logic.Redeye.Driver;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aamrah
 */
public class ChiefOfficerJPanel extends javax.swing.JPanel 
{

    /**
     * Creates new form ChiefOfficerJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    EcoSystem system;
    ArrayList<Complaint> complaintDirectory;
    ArrayList<PoliceOfficer> policeList;
    ArrayList<Driver> driverList;
    DefaultTableModel md;
    
    public ChiefOfficerJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem system) 
    {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.account=account;
        this.system=system;
        this.complaintDirectory= this.system.getComplaintDirectory().getComplaintList();
        
        populateTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void populateTable()
    {
        
        md=(DefaultTableModel)tblComplaints.getModel();
        md.setRowCount(0);
        Object row[]= new Object[8];
        
        for(Complaint c : complaintDirectory)
        {
            lblCurrentStatus.setText("");
            if(c.isNUPD())
            {
                if(c.getTypeOfComplaint().equalsIgnoreCase("Emergency"))
                {
                    row[0]=c;
                    row[1]=c.getTypeOfComplaint();
                    row[2]=c.getTypeOfIncident();
                    row[3]=c.getVictimStudent().getName();
                    if(c.getAccusedStudent()==null)
                    {
                        row[4]=" ";
                    }
                    else
                    {
                        row[4]=c.getAccusedStudent().getName();
                    }

                    row[5]=c.getLocation();
                    row[6]=c.getVictimStudent().getPhone();
                    row[7]=c.getStatus();
    //                row[7]=c.getNatureOfIncident();
                    md.addRow(row);
                }
                else
                {
                    row[0]=c;
                    row[1]=c.getTypeOfComplaint();
                    row[2]=c.getTypeOfIncident();
                    row[3]=c.getVictimStudent().getName();
                    row[4]=c.getAccusedStudent().getName();
                    row[5]=c.getLocation();
                    row[6]=c.getVictimStudent().getPhone();
                    row[7]=c.getStatus();
                    md.addRow(row);
                }
            }
           
            
                   
        }
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblComplaints = new javax.swing.JTable();
        lblHeading = new javax.swing.JLabel();
        btnPoliceOfficer = new javax.swing.JButton();
        btnRedeye = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnStatus = new javax.swing.JButton();
        lblCurrentStatus = new javax.swing.JLabel();
        lblAssign1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 153, 153));
        setLayout(null);

        tblComplaints.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Complaint ID", "Priority", "Type of Incident", "Victim", "Accused", "Location", "Contact", "Status"
            }
        ));
        jScrollPane1.setViewportView(tblComplaints);

        add(jScrollPane1);
        jScrollPane1.setBounds(0, 80, 1170, 179);

        lblHeading.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        lblHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeading.setText("ALL COMPLAINT");
        add(lblHeading);
        lblHeading.setBounds(-1, 24, 1170, 22);

        btnPoliceOfficer.setText("Police Officer");
        btnPoliceOfficer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPoliceOfficerActionPerformed(evt);
            }
        });
        add(btnPoliceOfficer);
        btnPoliceOfficer.setBounds(63, 347, 128, 29);

        btnRedeye.setText("RedEye Support");
        btnRedeye.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRedeyeActionPerformed(evt);
            }
        });
        add(btnRedeye);
        btnRedeye.setBounds(209, 347, 141, 29);

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        add(btnRefresh);
        btnRefresh.setBounds(1070, 40, 91, 29);

        btnStatus.setText("See current Status");
        btnStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStatusActionPerformed(evt);
            }
        });
        add(btnStatus);
        btnStatus.setBounds(870, 330, 157, 29);
        add(lblCurrentStatus);
        lblCurrentStatus.setBounds(680, 370, 480, 40);

        lblAssign1.setText("Assign to :");
        add(lblAssign1);
        lblAssign1.setBounds(63, 298, 68, 16);
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnPoliceOfficerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPoliceOfficerActionPerformed
        // TODO add your handling code here:
            int selectedRow =tblComplaints.getSelectedRow();
            if (selectedRow < 0) {
                JOptionPane.showMessageDialog(null, "Please pick a complaint to assign to Police Officer!", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else{
                Complaint complaint= (Complaint) tblComplaints.getValueAt(selectedRow, 0);
                //Complaint complaint= this.complaintDirectory.get(selectedRow);
                //String receiver=complaint.getReceiver();
            if(complaint.getStatus().equalsIgnoreCase("FreshCase"))
            {
                PoliceOfficerAssignJPanel policePanel= new PoliceOfficerAssignJPanel(userProcessContainer, account, system, complaint);
                userProcessContainer.add("AssignPoliceOfficer",policePanel);
                CardLayout cardlayout= (CardLayout) userProcessContainer.getLayout();
                cardlayout.next(userProcessContainer);
            }

            else if (complaint.getStatus().equalsIgnoreCase("AssignedToPoliceOfficer") || complaint.getStatus().equalsIgnoreCase("AssignedToUHCS")|| complaint.getStatus().equalsIgnoreCase("AssignedToRedeye") || complaint.getStatus().equalsIgnoreCase("AssignedToOUEC"))
            {
                JOptionPane.showMessageDialog(null, "Complaint is already assigned, check Status! select another complaint to assign", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else 
            {
                JOptionPane.showMessageDialog(null, "Case already closed, select another complaint to assign", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            
            
        }
         
    }//GEN-LAST:event_btnPoliceOfficerActionPerformed

    private void btnRedeyeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRedeyeActionPerformed
        // TODO add your handling code here:
        int selectedRow =tblComplaints.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please pick a complaint to assign to Redeye support!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{
           Complaint complaint= (Complaint) tblComplaints.getValueAt(selectedRow, 0);
            //String receiver=complaint.getReceiver();
            if(complaint.getStatus().equalsIgnoreCase("FreshCase") || complaint.getStatus().equalsIgnoreCase("Arrange Pickup"))
            {
                DriverAssignJPanel driverPanel= new DriverAssignJPanel(userProcessContainer, account, system, complaint);
                userProcessContainer.add("AssignDriver",driverPanel);
                CardLayout cardlayout= (CardLayout) userProcessContainer.getLayout();
                cardlayout.next(userProcessContainer);
            }
            else if (complaint.getStatus().equalsIgnoreCase("AssignedToPoliceOfficer") || complaint.getStatus().equalsIgnoreCase("AssignedToUHCS")|| complaint.getStatus().equalsIgnoreCase("AssignedToRedeye") || complaint.getStatus().equalsIgnoreCase("AssignedToOUEC"))
            {
                JOptionPane.showMessageDialog(null, "Complaint is already assigned, check Status! select another complaint to assign", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else 
            {
                JOptionPane.showMessageDialog(null, "Case already closed, select another complaint to assign", "Warning", JOptionPane.WARNING_MESSAGE);
            }
         
        }
    }//GEN-LAST:event_btnRedeyeActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:
        populateTable(); 
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStatusActionPerformed
        // TODO add your handling code here:
        int selectedRow =tblComplaints.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please pick a complaint to check status!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{
            Complaint complaint= (Complaint) tblComplaints.getValueAt(selectedRow, 0);
            if(complaint.isPolice())
            {
                policeList=this.system.getPoliceDirectory().getPoliceOfficerList();
                for (PoliceOfficer p : policeList)
                {
                    for (Complaint c : p.getPoliceComplaints())
                    {
                        if(c.getComplaintID().equals(complaint.getComplaintID()))
                        {
//                            lblCurrentStatus.setText(lblCurrentStatus.getText() + " Officer "+p.getName() + " is working on the case.\n Current Status="+c.getStatus());
                            String text =" Officer "+p.getName() + " is working on the case.\n Current Status="+c.getStatus();
                            if(lblCurrentStatus.getText().equals(text))
                            {
                                return;
                            }
                            lblCurrentStatus.setText(text);
                        }
                    }
                }
            }
            else if(complaint.isDriver())
            {
                driverList=this.system.getDriverDirectory().getDriverList();
                for (Driver d : driverList)
                {
                    for (Complaint c : d.getRidesList())
                    {
                        if(c.getComplaintID().equals(complaint.getComplaintID()))
                        {
                            lblCurrentStatus.setText(lblCurrentStatus.getText() + " Driver "+d.getEmployee().getName() + " is assigned for pickup.\n Current Status="+c.getStatus());
                        }
                    }
                }
            }
            else 
            {
                lblCurrentStatus.setText(complaint.getStatus());
            }
    }//GEN-LAST:event_btnStatusActionPerformed
    }   
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPoliceOfficer;
    private javax.swing.JButton btnRedeye;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnStatus;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAssign1;
    private javax.swing.JLabel lblCurrentStatus;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JTable tblComplaints;
    // End of variables declaration//GEN-END:variables
}
