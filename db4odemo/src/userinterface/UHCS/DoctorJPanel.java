/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.UHCS;

import Business.Complaint.Complaint;
import Business.EcoSystem;
import Business.Logic.UHCS.Doctor;
import Business.Student.Student;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aamrah
 */
public class DoctorJPanel extends javax.swing.JPanel 
{

    /**
     * Creates new form DoctorJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    EcoSystem system;
    ArrayList<Complaint> complaintListWorkQueue;       //WorkRequest is complaint
    Complaint complaintWorkRequest, mainComplaint;
    Doctor doctor;
    int selectedRow = -1;
    
    public DoctorJPanel(JPanel userProcessContainer, UserAccount account, EcoSystem system)
    {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.system = system;
        complaintListWorkQueue = this.account.getWorkQueue().getComplaintList();       //Work Queue is holding ComplaintList
                disableAll();
        
        doctor = system.getDoctorDirectory().fetchDoctorWithUserName(account.getEmployee().getUsername());
        complaintWorkRequest = doctor.getComplaint();
        mainComplaint= system.getComplaintDirectory().getComplaint(complaintWorkRequest.getComplaintID());
        
    
        
            populateTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        btnStartTreatment = new javax.swing.JButton();
        btnTreatmentComplete = new javax.swing.JButton();
        btnScheduleTreatment = new javax.swing.JButton();
        btnRefreshStatus = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnDecide = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblComplaintsWithOpenStatus = new javax.swing.JTable();
        btnAcceptCase = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        btnCloseComplaint = new javax.swing.JButton();
        btnAssignAdvisor = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtDoctorFeedBack = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 153, 153));
        setLayout(null);

        btnBack.setText("< Go Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(0, 27, 108, 29);

        lblTitle.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("IN BUCKET COMPLAINTS");
        add(lblTitle);
        lblTitle.setBounds(0, 60, 1000, 59);

        btnStartTreatment.setText("Start Treatment");
        btnStartTreatment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartTreatmentActionPerformed(evt);
            }
        });
        add(btnStartTreatment);
        btnStartTreatment.setBounds(43, 482, 141, 29);

        btnTreatmentComplete.setText("Treatment Complete");
        btnTreatmentComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTreatmentCompleteActionPerformed(evt);
            }
        });
        add(btnTreatmentComplete);
        btnTreatmentComplete.setBounds(221, 482, 172, 29);

        btnScheduleTreatment.setText("Schedule Treatment Appointment");
        btnScheduleTreatment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScheduleTreatmentActionPerformed(evt);
            }
        });
        add(btnScheduleTreatment);
        btnScheduleTreatment.setBounds(170, 393, 254, 29);

        btnRefreshStatus.setText("Refresh ");
        btnRefreshStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshStatusActionPerformed(evt);
            }
        });
        add(btnRefreshStatus);
        btnRefreshStatus.setBounds(720, 160, 100, 29);

        jLabel2.setText("Open Complaints under you:");
        add(jLabel2);
        jLabel2.setBounds(120, 200, 180, 16);

        btnDecide.setText("Decide");
        btnDecide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDecideActionPerformed(evt);
            }
        });
        add(btnDecide);
        btnDecide.setBounds(840, 270, 87, 29);

        tblComplaintsWithOpenStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Type of Complaint", "Victim", "Date Of Incident", "Type of Incident", "Description", "Feedback", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblComplaintsWithOpenStatus);

        add(jScrollPane1);
        jScrollPane1.setBounds(120, 230, 696, 107);

        btnAcceptCase.setText("Accept Case");
        btnAcceptCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptCaseActionPerformed(evt);
            }
        });
        add(btnAcceptCase);
        btnAcceptCase.setBounds(43, 393, 121, 29);

        jLabel5.setText("Once Student Accepts:");
        add(jLabel5);
        jLabel5.setBounds(42, 454, 142, 16);

        btnCloseComplaint.setText("Close Complaint");
        btnCloseComplaint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseComplaintActionPerformed(evt);
            }
        });
        add(btnCloseComplaint);
        btnCloseComplaint.setBounds(138, 632, 148, 29);

        btnAssignAdvisor.setText("Assign Advisor & Close");
        btnAssignAdvisor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignAdvisorActionPerformed(evt);
            }
        });
        add(btnAssignAdvisor);
        btnAssignAdvisor.setBounds(292, 632, 191, 29);

        jLabel6.setText("Close the case from either of below options based on Complaint type:");
        add(jLabel6);
        jLabel6.setBounds(43, 604, 440, 16);
        add(txtDoctorFeedBack);
        txtDoctorFeedBack.setBounds(420, 500, 231, 30);

        jLabel1.setText("Enter Doctor Feedback:");
        add(jLabel1);
        jLabel1.setBounds(430, 480, 146, 20);
    }// </editor-fold>//GEN-END:initComponents
    
    public void disableAll() {
        txtDoctorFeedBack.setEnabled(false);
        btnDecide.setEnabled(false);
        btnAcceptCase.setEnabled(false);
        btnStartTreatment.setEnabled(false);
        btnScheduleTreatment.setEnabled(false);
        btnStartTreatment.setEnabled(false);
        btnTreatmentComplete.setEnabled(false);
        btnCloseComplaint.setEnabled(false);
        btnAssignAdvisor.setEnabled(false);
    }
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        disableAll();
        // clear table
        DefaultTableModel model = (DefaultTableModel) tblComplaintsWithOpenStatus.getModel();
        model.setRowCount(0);

        //back page
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRefreshStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshStatusActionPerformed

        refresh();
    }//GEN-LAST:event_btnRefreshStatusActionPerformed
    
    public void refresh() {
        disableAll();

        // clear selected table
        DefaultTableModel model = (DefaultTableModel) tblComplaintsWithOpenStatus.getModel();
        model.setRowCount(0);

        //repopulates main table
        populateTable();//only 1 complaint
    }
    
    public void populateTable() {
        
        //newly getting values
        complaintListWorkQueue = this.account.getWorkQueue().getComplaintList();
        
        DefaultTableModel md=(DefaultTableModel)tblComplaintsWithOpenStatus.getModel();
        md.setRowCount(0);
        Object row[]= new Object[8];
        
        if (complaintWorkRequest!=null) {
                    row[0] = complaintWorkRequest; //in toString it is ID
                    row[1] = complaintWorkRequest.getTypeOfComplaint();
                    row[2] = complaintWorkRequest.getVictimStudent().getName();
                    row[3] = complaintWorkRequest.getDateOfIncident();
                    row[4] = complaintWorkRequest.getTypeOfIncident();
                    row[5] = complaintWorkRequest.getDescription();
                    row[6] = complaintWorkRequest.getDescription(); //must be feedback
                    row[7] = complaintWorkRequest.getStatus();
                     
                    md.addRow(row);
                    btnDecide.setEnabled(true);  
        }
             
    }
    
    private void btnDecideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDecideActionPerformed
        

        selectedRow = tblComplaintsWithOpenStatus.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
            return;
        }
        disableAll();
        //cant add another to selected table
        btnDecide.setEnabled(false);
        
        Complaint complaintWorkRequest = (Complaint) tblComplaintsWithOpenStatus.getValueAt(selectedRow, 0);

        
        String status = String.valueOf(complaintWorkRequest.getStatus());
        if ("UHCS Doctor Assigned".equals(status)) {
            btnAcceptCase.setEnabled(true);
        } else if ("UHCS Doctor Accepted".equals(status)) {
            btnScheduleTreatment.setEnabled(true);
            btnAcceptCase.setEnabled(false);
        } else if ("UHCS Doctor Scheduled Treatment".equals(status)) {
            //get notified or not student's my complaints
            Student originalStudent = system.getStudentDirectory().getStudent(complaintWorkRequest.getVictimStudent().getUsername());
            if (originalStudent !=null) {        
                Complaint originalStudentComplaint = originalStudent.getMyComplaint(complaintWorkRequest.getComplaintID());
                if (originalStudentComplaint!=null) {
                    if(!originalStudentComplaint.isNotifyFromDoctor()) {       //on false
                        btnStartTreatment.setEnabled(true); 
                        btnScheduleTreatment.setEnabled(false);
                    }
                }
            }
            
        } else if ("UHCS Doctor Treating".equals(status)) { // button not to be enabled for all statuses from "UHCS Assigned Doctor" till before this
            btnTreatmentComplete.setEnabled(true);
            btnStartTreatment.setEnabled(false);
        } else if ("UHCS Doctor Treatment Done".equals(status)) {
            txtDoctorFeedBack.setEnabled(true);
            btnCloseComplaint.setEnabled(true);
            btnAssignAdvisor.setEnabled(true);
            btnTreatmentComplete.setEnabled(false);
        } 
        

    }//GEN-LAST:event_btnDecideActionPerformed

    private void btnAcceptCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptCaseActionPerformed
        btnAcceptCase.setEnabled(false);
        
        Complaint complaintWorkRequest = (Complaint) tblComplaintsWithOpenStatus.getValueAt(0, 0);
        complaintWorkRequest.setStatus("UHCS Doctor Accepted");
        
        refresh();

        //enable buttons
        /*btnStartTreatment.setEnabled(true);
        btnAcceptCase.setEnabled(false);

        //update tables
        populateTable();*/
    }//GEN-LAST:event_btnAcceptCaseActionPerformed

    private void btnAssignAdvisorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignAdvisorActionPerformed
        
        if (txtDoctorFeedBack.getText().toString().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Feedback is mandatory!!");
            return;
        }
        mainComplaint.setDoctorFeedback(txtDoctorFeedBack.getText());
        btnCloseComplaint.setEnabled(false);
        btnAssignAdvisor.setEnabled(false);
        
        Complaint complaintWorkRequest = (Complaint) tblComplaintsWithOpenStatus.getValueAt(0, 0);
        complaintWorkRequest.setDoctorFeedback(txtDoctorFeedBack.getText().toString());
        //status is set in next page
        
        //setting current complaint to null and freeing himself
        doctor.setComplaint(null);
        doctor.getEmployee().setIsFree(true);
        account.getEmployee().setIsFree(true);
        
        // clear selected table
        DefaultTableModel model = (DefaultTableModel) tblComplaintsWithOpenStatus.getModel();
        model.setRowCount(0);
        
        disableAll();

        //enable buttons
        //btnStartTreatment.setEnabled(false);

        //move to next page
        AssignAdvisorJPanel page = new AssignAdvisorJPanel(userProcessContainer,account,complaintWorkRequest,system);
        userProcessContainer.add("Assign Advisor Page",page);
        CardLayout layout=(CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);

        refresh();
        //update tables - this will be done, when moved from next page
        /*populateSelectedTable(complaintWorkRequest);
        populateTable();*/
    }//GEN-LAST:event_btnAssignAdvisorActionPerformed

    private void btnStartTreatmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartTreatmentActionPerformed
        btnStartTreatment.setEnabled(false);
        
        Complaint complaintWorkRequest = (Complaint) tblComplaintsWithOpenStatus.getValueAt(0, 0);
        complaintWorkRequest.setStatus("UHCS Doctor Treating");
        
        refresh();
    }//GEN-LAST:event_btnStartTreatmentActionPerformed

    private void btnScheduleTreatmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScheduleTreatmentActionPerformed
        btnScheduleTreatment.setEnabled(false);
        
        Complaint complaintWorkRequest = (Complaint) tblComplaintsWithOpenStatus.getValueAt(0, 0);
        complaintWorkRequest.setStatus("UHCS Doctor Scheduled Treatment");
        
        //notify student in student's my complaints
        Student originalStudent = system.getStudentDirectory().getStudent(complaintWorkRequest.getVictimStudent().getUsername());
        if (originalStudent !=null) {        
            Complaint originalStudentComplaint = originalStudent.getMyComplaint(complaintWorkRequest.getComplaintID());
            if (originalStudentComplaint!=null) {
                originalStudentComplaint.setDoctorName(account.getName());
                originalStudentComplaint.setNotifyFromDoctor(true);
                JOptionPane.showMessageDialog(this,"User notified about treatment");
            }
        }
        
        refresh();        
    }//GEN-LAST:event_btnScheduleTreatmentActionPerformed

    private void btnTreatmentCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTreatmentCompleteActionPerformed
        btnTreatmentComplete.setEnabled(false);
        
        Complaint complaintWorkRequest = (Complaint) tblComplaintsWithOpenStatus.getValueAt(0, 0);
        complaintWorkRequest.setStatus("UHCS Doctor Treatment Done");
        
       
        refresh();
    }//GEN-LAST:event_btnTreatmentCompleteActionPerformed

    private void btnCloseComplaintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseComplaintActionPerformed
        if (txtDoctorFeedBack.getText().toString().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Feedback is mandatory!!");
            return;
        }
        mainComplaint.setDoctorFeedback(txtDoctorFeedBack.getText());
        btnCloseComplaint.setEnabled(false);
        btnAssignAdvisor.setEnabled(false);
        
        Complaint complaintWorkRequest = (Complaint) tblComplaintsWithOpenStatus.getValueAt(0, 0);
        complaintWorkRequest.setDoctorFeedback(txtDoctorFeedBack.getText().toString());
                
        complaintWorkRequest.setStatus("UHCS Doctor Completed");
        
        //setting current complaint to null and freeing himself
        doctor.setComplaint(null);
        doctor.getEmployee().setIsFree(true);
        account.getEmployee().setIsFree(true);
        mainComplaint.setStatus("CaseClosed");
        // clear selected table
        DefaultTableModel model = (DefaultTableModel) tblComplaintsWithOpenStatus.getModel();
        model.setRowCount(0);
        
        disableAll();
        
        refresh();
    }//GEN-LAST:event_btnCloseComplaintActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAcceptCase;
    private javax.swing.JButton btnAssignAdvisor;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCloseComplaint;
    private javax.swing.JButton btnDecide;
    private javax.swing.JButton btnRefreshStatus;
    private javax.swing.JButton btnScheduleTreatment;
    private javax.swing.JButton btnStartTreatment;
    private javax.swing.JButton btnTreatmentComplete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblComplaintsWithOpenStatus;
    private javax.swing.JTextField txtDoctorFeedBack;
    // End of variables declaration//GEN-END:variables
}
